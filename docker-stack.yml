version: '3'
services:
  redis:
    image: redis:alpine
    networks:
      - frontend
      - backend
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
  
  db:
    image: postgres:9.4
    tty: true
    restart: always
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - "db-data:/var/lib/postgresql/data"
    networks:
      - backend
    ports:
      - '5432:5432'
    deploy:
      placement:
        constraints: [node.role == manager]

  vote-app:
    build: 'gabriel984/voteapp_redis'
    depends_on:
      - redis
    ports:
      - 3333:3333
    networks:
      - frontend
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure

  backend-app:
    build: 'gabriel984/voteapp_backend'
    ports:
      - 4444:4444
    depends_on:
      - redis
      - db
    networks:
      - backend
      - frontend
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

volumes:
  db-data:

networks:
  frontend:
  backend: